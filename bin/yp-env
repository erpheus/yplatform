#!/usr/bin/env bash

if [[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] || \
       [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null); then
    # sourced
    true
else
    # executed
    set -euo pipefail
fi

# document exports
# NOTE exported variables need to be in sync with build.mk/core.common.mk:9

YP_ENV_EXPORTS=(
    HOMEBREW_PREFIX
    INFOPATH
    MANPATH
    NVM_DIR
    PATH
    YP_ENV
)

if [[ -n ${ZSH_EVAL_CONTEXT:-} && ${ZSH_EVAL_CONTEXT:-} =~ :file$ ]] || \
       [[ -n ${BASH_VERSION:-} ]] && (return 0 2>/dev/null); then
    # sourced
    true
else
    # executed (from build.mk/core.common.mk)
    MAIN=true
fi

main() {
    [[ "${MAIN:-}" = "true" ]] || return 0

    if [[ $# -eq 1 ]]; then
        eval "echo \${$1}"
    elif [[ $# -gt 1 ]]; then
        while [[ $# -gt 0 ]]; do
            eval "echo $1=\${$1}"
            shift
        done
    else
        for VAR in "${YP_ENV_EXPORTS[@]}"; do
            eval "echo $VAR=\${$VAR}"
        done
    fi
}

[[ "${YP_ENV:-}" != "true" ]] || {
    main "$@"
    exit 0
}

[[ -n "${YP_DIR:-}" ]] || {
    if [[ -n "${BASH_VERSION:-}" ]]; then
        YP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." >/dev/null && pwd)"
        # echo >&2 YP_DIR=$YP_DIR
    elif [[ -n "${ZSH_VERSION:-}" ]]; then
        # shellcheck disable=SC2296
        YP_DIR="$(cd "$(dirname ${(%):-%x})/.." >/dev/null && pwd)"
    else
        echo >&2 "Unsupported shell or \$BASH_VERSION and \$ZSH_VERSION are undefined."
        exit 1
    fi
}

function yp::path_prepend() {
    echo ":${PATH}:" | grep -q ":$1:" || export PATH=$1:${PATH}
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

function yp::path_prepend_after() {
    if echo ":${PATH}:" | grep -q ":$2:"; then
        export PATH=$(echo "${PATH}" | sed "s/:$2:/:$2:$1:/")
    else
        yp::path_prepend "$1"
    fi
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

function yp::path_append() {
    echo ":${PATH}:" | grep -q ":$1:" || export PATH=${PATH}:$1
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

function yp::path_append_before() {
    if echo ":${PATH}:" | grep -q ":$2:"; then
      export PATH=$(echo "${PATH}" | sed "s/:$2:/:$1:$2:/")
    else
        yp::path_append "$1"
    fi
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

[[ -z "${HOMEBREW_PREFIX:-}" ]] || [[ -f "${HOMEBREW_PREFIX:-}/bin/brew" ]] || {
    unset HOMEBREW_PREFIX
    unset HOMEBREW_CELLAR
    unset HOMEBREW_REPOSITORY
    unset HOMEBREW_SHELLENV_PREFIX
}

[[ -n "${HOMEBREW_PREFIX:-}" ]] || if [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    # linux with sudo
    export HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew
elif [[ -x ${HOME}/.linuxbrew/bin/brew ]]; then
    # linux without sudo
    export HOMEBREW_PREFIX=${HOME}/.linuxbrew
elif [[ -x /usr/local/bin/brew ]]; then
    # macos
    export HOMEBREW_PREFIX=/usr/local
elif [[ -x /opt/homebrew/bin/brew ]]; then
    # macos m1
    export HOMEBREW_PREFIX=/opt/homebrew
elif command -v brew >/dev/null 2>&1; then
    # misc
    export HOMEBREW_PREFIX=$(brew --prefix)
fi

# remove homebrew (linuxbrew) from PATH which is appended, not prepended (default homebrew behaviour)
# see https://github.com/actions/virtual-environments/pull/789
[[ "${GITHUB_ACTIONS:-}" != "true" ]] || [[ "${RUNNER_OS:-}" != "Linux" ]] || {
    export PATH=$(echo ":${PATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/bin:|:|" | sed "s|::|:|")
    export PATH=$(echo ":${PATH}:" | sed "s|:/home/linuxbrew/.linuxbrew/sbin:|:|" | sed "s|::|:|")
    export PATH=$(echo "${PATH}" | sed "s|^:||" | sed "s|:$||")
}

# jq becomes always available
# NOTE if needed to bypass system's jq, call yp-jq
yp::path_append ${YP_DIR}/bin/.jq

# jd becomes always available
# NOTE if needed to bypass system's jd, call yp-jd
yp::path_append ${YP_DIR}/bin/.jd

# yq becomes always available
# NOTE if needed to bypass system's yq, call yp-yq
yp::path_append ${YP_DIR}/bin/.yq

yp::path_prepend /usr/local/sbin
yp::path_prepend /usr/local/bin
yp::path_prepend ${HOME}/.local/sbin
yp::path_prepend ${HOME}/.local/bin

[[ -n "${NVM_DIR:-}" ]] || export NVM_DIR=${HOME}/.nvm

if [[ -n "${HOMEBREW_PREFIX:-}" ]]; then
    # 'brew shellenv' duplicates items in PATH variables
    eval "$(HOMEBREW_SHELLENV_PREFIX="" ${HOMEBREW_PREFIX}/bin/brew shellenv | grep -v \
        -e "^export PATH=" \
        -e "^export MANPATH=" \
        -e "^export INFOPATH=")"

    yp::path_prepend ${HOMEBREW_PREFIX}/sbin
    yp::path_prepend ${HOMEBREW_PREFIX}/bin

    # yp_manpath_prepend ${HOMEBREW_PREFIX}/share/man
    HOMEBREW_MANPATH=${HOMEBREW_PREFIX}/share/man
    echo ":${MANPATH:-}:" | grep -q ":${HOMEBREW_MANPATH}:" || export MANPATH=${HOMEBREW_MANPATH}:${MANPATH:-}
    export MANPATH=$(echo "${MANPATH}" | sed "s|^:||" | sed "s|:$||")

    # yp_infopath_prepend ${HOMEBREW_PREFIX}/share/info
    HOMEBREW_INFOPATH=${HOMEBREW_PREFIX}/share/info
    echo ":${INFOPATH:-}:" | grep -q ":${HOMEBREW_INFOPATH}:" || export INFOPATH=${HOMEBREW_INFOPATH}:${INFOPATH:-}
    export INFOPATH=$(echo "${INFOPATH}" | sed "s|^:||" | sed "s|:$||")

    for f in coreutils findutils gnu-sed gnu-tar gnu-time gnu-which grep gzip make; do
        yp::path_prepend ${HOMEBREW_PREFIX}/opt/${f}/libexec/gnubin
    done
    for f in curl gettext gnu-getopt openssl@1.1 unzip zip; do
        yp::path_prepend ${HOMEBREW_PREFIX}/opt/${f}/bin
    done

    # command is defined and is a function (no path)
    [[ "$(command -v nvm 2>&1)" = "nvm" ]] || {
        NOUNSET_STATE="$(set +o | grep nounset)"
        set +u
        # using a less exact call because 'brew --prefix nvm' is very very slow
        # NVM_INSTALLATION_DIR=$(brew --prefix nvm 2>/dev/null || true)
        NVM_INSTALLATION_DIR=${HOMEBREW_PREFIX}/opt/nvm
        # shellcheck disable=SC1091
        [[ ! -r ${NVM_INSTALLATION_DIR}/nvm.sh ]] || source ${NVM_INSTALLATION_DIR}/nvm.sh --no-use
        unset NVM_INSTALLATION_DIR
        eval "${NOUNSET_STATE}"
        unset NOUNSET_STATE
    }

    # command is defined and is a function (no path)
    [[ "$(command -v asdf 2>&1)" = "asdf" ]] || [[ -n "${ASDF_DIR:-}" ]] || {
        NOUNSET_STATE="$(set +o | grep nounset)"
        set +u
        # using a less exact call because 'brew --prefix asdf' is very very slow
        # source $(brew --prefix asdf)/asdf.sh
        # shellcheck disable=SC1091
        source ${HOMEBREW_PREFIX}/opt/asdf/asdf.sh
        eval "${NOUNSET_STATE}"
        unset NOUNSET_STATE
    }
fi

[[ -z "${ASDF_DIR:-}" ]] || {
    # user a hardcoded value for performance
    # yp::path_prepend "$(${YP_DIR}/bin/asdf-get-asdf-bin)"
    # yp::path_prepend "$(${YP_DIR}/bin/asdf-get-asdf-user-shims)"
    yp::path_prepend "${ASDF_DIR}/bin"
    yp::path_prepend "${ASDF_DATA_DIR:-${HOME}/.asdf}/shims"
}

[[ -z "${NVM_BIN:-}" ]] || {
    # user a hardcoded value for performance
    # yp::path_prepend "$(${YP_DIR}/bin/nvm-get-nvm-bin)"
    yp::path_prepend "${NVM_BIN}"
}

export YP_ENV=true
export "${YP_ENV_EXPORTS[@]}"

main "$@"
