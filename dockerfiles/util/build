#!/usr/bin/env bash
set -euo pipefail

YP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
source ${YP_DIR}/sh/common.inc.sh

DOCKER_OS_RELEASE_ID=
DOCKER_OS_RELEASE_VERSION_ID=

DOCKERFILE=
PLATFORMS=
NAME=
TAGS=
PUSH=
ARG_FROM=
ARG_YP_CI_BREW_INSTALL=minimal

while [[ $# -gt 0 ]]; do
    case "$1" in
        --dockerfile)
            DOCKERFILE=$2
            shift 2
            ;;
        --platforms)
            PLATFORMS=$2
            shift 2
            ;;
        --name)
            NAME=$2
            shift 2
            ;;
        --tags)
            TAGS=$2
            shift 2
            ;;
        --push)
            PUSH=true
            shift
            ;;
        --from)
            ARG_FROM=$2
            shift 2
            ;;
        --yp-ci-brew-install)
            ARG_YP_CI_BREW_INSTALL=$2
            shift 2
            ;;
        -h|--help)
            sh_script_usage
            ;;
        -v|--version)
            sh_script_version
            ;;
        -* )
            sh_script_usage
            ;;
        *)
            break
            ;;
    esac
done

MYSELF=${BASH_SOURCE[0]}
OS_RELEASE_DIR="$(cd "$(dirname ${MYSELF})" && pwd)"
OS_RELEASE_FILE=$(dirname ${MYSELF})/os-release

DOCKER_OS_RELEASE_ID="$(source ${OS_RELEASE_FILE} && echo ${ID})"
DOCKER_OS_RELEASE_VERSION_ID="$(source ${OS_RELEASE_FILE} && echo ${VERSION_ID:-0})"
case ${DOCKER_OS_RELEASE_ID} in
    alpine)
        # track minor for alpine, not patch
        # shellcheck disable=SC2206
        DOCKER_OS_RELEASE_VERSION_ID_ARR=( ${DOCKER_OS_RELEASE_VERSION_ID//./ } )
        DOCKER_OS_RELEASE_VERSION_ID=${DOCKER_OS_RELEASE_VERSION_ID_ARR[0]}.${DOCKER_OS_RELEASE_VERSION_ID_ARR[1]}
        ;;
    *)
        ;;
esac

OS_RELEASE_DIR2="${YP_DIR}/dockerfiles/yp-${DOCKER_OS_RELEASE_ID}-${DOCKER_OS_RELEASE_VERSION_ID}"
[[ "${OS_RELEASE_DIR}" = "${OS_RELEASE_DIR2}" ]] || {
    echo_info "OS_RELEASE_DIR=${OS_RELEASE_DIR}"
    echo_info "OS_RELEASE_DIR2=${OS_RELEASE_DIR2}"
    echo_err "Inferred directory doesn't match this script's directory."
    exit 1
}

[[ -n "${ARG_FROM}" ]] || {
    case ${DOCKER_OS_RELEASE_ID}-${DOCKER_OS_RELEASE_VERSION_ID} in
        alpine-*)
            ARG_FROM=ruby:2.6-alpine${DOCKER_OS_RELEASE_VERSION_ID}
            ;;
        amzn-*)
            ARG_FROM=amazonlinux:latest
            ;;
        arch-0)
            ARG_FROM=archlinux:latest
            ;;
        centos-*)
            ARG_FROM=quay.io/centos/centos:stream${DOCKER_OS_RELEASE_VERSION_ID}
            ;;
        rhel-*)
            ARG_FROM=redhat/ubi8:${DOCKER_OS_RELEASE_VERSION_ID}
            ;;
        *)
            ARG_FROM=${DOCKER_OS_RELEASE_ID}:${DOCKER_OS_RELEASE_VERSION_ID}
            ;;
    esac
}

[[ -n "${DOCKERFILE}" ]] || \
    DOCKERFILE=$(readlink -f ${OS_RELEASE_DIR}/Dockerfile)

[[ -n "${NAME}" ]] || {
    # sync with ci/util/docker-ci.inc.sh line:~100 "yp_get_docker_ci_image"
    NAME=yp-${DOCKER_OS_RELEASE_ID}-${DOCKER_OS_RELEASE_VERSION_ID}-${ARG_YP_CI_BREW_INSTALL}
}

[[ -n "${TAGS}" ]] || {
    [[ "${PUSH}" != "true" ]] || {
        echo_err "--docker-image-tags is required when --docker-image-push."
        exit 1
    }
    TAGS=ysoftwareab/${NAME}:$(cat ${YP_DIR}/package.json | jq -r ".version")-local
}

IFS="," read -r -a TAGS_ARRAY <<< "${TAGS}"

echo_do "Building ${TAGS_ARRAY[*]}..."

GIT_DIR="$(git rev-parse --git-dir)"
[[ "${GIT_DIR}" = ".git" ]] || [[ "${GIT_DIR}" = "${GIT_ROOT}/.git" ]] || {
    echo_info "${GIT_ROOT}/.git is now a $(stat --format=%F ${GIT_ROOT}/.git) and git dir points to ${GIT_DIR}."
    echo_err "${GIT_ROOT}/.git is required to be the git dir, a directory and not a soft link."
    exit 1
}

BUILDX_PLATFORM_ARG=
[[ -z "${PLATFORMS}" ]] || BUILDX_PLATFORM_ARG="--platform ${PLATFORMS}"
BUILDX_PUSH_ARG=
[[ "${PUSH}" != "true" ]] || BUILDX_PUSH_ARG="--push"
BUILDX_TAG_ARG=
for TAG in "${TAGS_ARRAY[@]}"; do
    BUILDX_TAG_ARG+=" --tag ${TAG}"
done
exe docker buildx build ${YP_DIR} \
    ${BUILDX_PLATFORM_ARG} \
    ${BUILDX_PUSH_ARG} \
    ${BUILDX_TAG_ARG} \
    --file ${DOCKERFILE} \
    --build-arg YP_CI_BREW_INSTALL=${ARG_YP_CI_BREW_INSTALL} \
    --build-arg YP_DOCKER_CI_FROM=${ARG_FROM} \
    --build-arg YP_DOCKER_CI_IMAGE_NAME=${NAME} \
    --build-arg YP_OS_RELEASE_DIR=${OS_RELEASE_DIR#"${YP_DIR}"/}
echo_done
